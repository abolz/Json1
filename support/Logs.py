#===================================================================================================
#
#===================================================================================================

# Precision, ExponentBits = 24, 8
# Bits = 32
Precision, ExponentBits = 53, 11
Bits = 32
# Precision, ExponentBits = 64, 15 # This will take a while...
# Bits = 32+16
# Precision, ExponentBits = 113, 15
# Bits = 32+16


Bias = 2**(ExponentBits - 1) - 1 + (Precision - 1)
MinExponent = 1 - Bias
MaxExponent = 2**ExponentBits - 2 - Bias

if False:
    MinExponent -= 2
    MaxExponent -= 2

# print "MinExponent = {}, MaxExponent = {}".format(MinExponent, MaxExponent)

if True:
    # signed
    MinInt = -2**(Bits-1)
    MaxInt =  2**(Bits-1)-1
else:
    # unsigned
    MinInt = 0
    MaxInt = 2**Bits - 1

class LogApprox:
    def __init__(self, b=0, B=0, mul=0, shift=0):
        self.b = b
        self.B = B
        self.mul = mul
        self.shift = shift

    def FloorOverflow(self, e):
        return int(e) * self.mul > MaxInt or int(e) * self.mul < MinInt

    def Floor(self, e):
        return (int(e) * self.mul) >> self.shift

    def IsFloor(self, k, e):
        # b^k <= B^E < b^(k+1)
        x = 1
        y = 1
        if k >= 0:
            x *= self.b**k
        else:
            y *= self.b**(-k)
        if e >= 0:
            y *= self.B**e
        else:
            x *= self.B**(-e)
        return x <= y and y < x * self.b

    def TestFloor(self, e):
        if self.FloorOverflow(e):
            # print "Integer overflow in floor: e = {}".format(e)
            return False
        k = self.Floor(e)
        if not self.IsFloor(k, e):
            # print "floor test failed: k = {}, b = {}, B = {}, e = {}".format(k, self.b, self.B, e)
            return False
        return True

    def CeilOverflow(self, e):
        return int(e) * self.mul + (2**self.shift - 1) > MaxInt or int(e) * self.mul < MinInt

    def Ceil(self, e):
        return (int(e) * self.mul + (2**self.shift - 1)) >> self.shift

    def IsCeil(self, k, e):
        # b^(k-1) < B^E < b^k   <=>   b^k < B^E * b < b^k * b
        x = 1
        y = self.b
        if k >= 0:
            x *= self.b**k
        else:
            y *= self.b**(-k)
        if e >= 0:
            y *= self.B**e
        else:
            x *= self.B**(-e)
        return x < y and y <= x * self.b

    def TestCeil(self, e):
        if self.CeilOverflow(e):
            print "Integer overflow in ceil: e = {}".format(e)
            return False
        k = self.Ceil(e)
        # if k < MinInt or k > MaxInt:
        #     print "Result is out of range"
        #     return False
        if not self.IsCeil(k, e):
            print "ceil test failed: k = {}, b = {}, B = {}, e = {}".format(k, self.b, self.B, e)
            return False
        return True

def FindMinMax(f, min_exp=MinExponent, max_exp=MaxExponent):
    maxE = -99999999
    minE =  99999999
    for e in range(0, -min_exp + 1):
        if not f(-e):
            break
        minE = -e
    for e in range(0, max_exp + 1):
        if not f(e):
            break
        maxE = e
    return minE, maxE

#===================================================================================================
#
#===================================================================================================

Log10_2 = 0.301029995663981198017467022509663365781307220458984375
Log10_5 = 0.69897000433601885749368420874816365540027618408203125
Log2_10 = 3.321928094887362181708567732130177319049835205078125
Log2_5 = 2.321928094887362181708567732130177319049835205078125
Log5_2 = 0.430676558073393056513822330089169554412364959716796875
Log5_10 = 1.4306765580733931120249735613469965755939483642578125

class Result:
    pass

def DoTest(L, b, B):
    results = []
    for e2 in range(0, Bits):
        r = Result()
        r.mul = int( "{:.0f}".format(L * 2**e2) )
        r.shift = e2
        results.append(r)

    good = False
    for r in results:
        L = LogApprox()
        L.b = b
        L.B = B
        L.mul = r.mul
        L.shift = r.shift
        minE_floor, maxE_floor = FindMinMax(L.TestFloor, min_exp=-5000, max_exp=5000)
        minE_ceil, maxE_ceil = FindMinMax(L.TestCeil, min_exp=-5000, max_exp=5000)
        r.minE = max(minE_floor, minE_ceil)
        r.maxE = min(maxE_floor, maxE_ceil)

    results.sort(key=lambda x: x.maxE, reverse=True)

    print "log_{} {}^e:".format(b, B)
    for r in results:
        print "{:>25}, {:3d}  =>  [{:6}, {:6}]".format(r.mul, r.shift, r.minE, r.maxE)
    print ""

DoTest(Log10_2, 10, 2)
DoTest(Log10_5, 10, 5)
DoTest(Log2_10, 2, 10)
DoTest(Log2_5, 2, 5)
DoTest(Log5_2, 5, 2)
DoTest(Log5_10, 5, 10)

#===================================================================================================
#
#===================================================================================================

def floor_Log10Pow2(e):
    return (e * 315653) >> 20

def ceil_Log10Pow2(e):
    return (e * 315653 + (2**20 - 1)) >> 20

# print "Log10Pow2 range:"
# print FindMinMax(LogApprox(10, 2, 315653, 20).TestCeil, min_exp=-5000, max_exp=5000)
# print FindMinMax(LogApprox(10, 2, 78913, 18).TestCeil, min_exp=-5000, max_exp=5000)

# log_10 2^e:
#          315653,  20  =>  [-2620,  2620]
#          631306,  21  =>  [-2620,  2620]
#         1262611,  22  =>  [-1700,  1697]
#           78913,  18  =>  [-1650,  1650]
#          157826,  19  =>  [-1650,  1650]
#         2525223,  23  =>  [ -850,   847]
#            1233,  12  =>  [ -680,   680]
#            2466,  13  =>  [ -680,   680]
#            4932,  14  =>  [ -680,   680]
#            9864,  15  =>  [ -680,   680]
#           19728,  16  =>  [ -680,   680]
#           39457,  17  =>  [ -484,   484]
#         5050445,  24  =>  [ -425,   421]
#        10100891,  25  =>  [ -212,   209]
#              77,   8  =>  [ -102,   102]
#             154,   9  =>  [ -102,   102]
#             308,  10  =>  [ -102,   102]
#        20201781,  26  =>  [ -106,   102]
#             617,  11  =>  [  -82,    82]
#        40403562,  27  =>  [  -53,    49]
#        80807124,  28  =>  [  -26,    23]
#              39,   7  =>  [  -22,    22]
#               5,   4  =>  [  -12,    12]
#              10,   5  =>  [  -12,    12]
#              19,   6  =>  [   -9,     9]
#       161614248,  29  =>  [  -13,     9]
#               1,   2  =>  [   -3,     3]
#               2,   3  =>  [   -3,     3]
#       323228497,  30  =>  [   -6,     3]
#               1,   1  =>  [   -1,     1]
#               0,   0  =>  [    0,     0]
#       646456993,  31  =>  [   -3,     0]

def floor_Log10Pow5(e):
    return (e * 732923) >> 20

def ceil_Log10Pow5(e):
    return (e * 732923 + (2**20 - 1)) >> 20

# print "Log10Pow5 range:"
# print FindMinMax(LogApprox(10, 5, 732923, 20).TestCeil, min_exp=-5000, max_exp=5000)

# log_10 5^e:
#          732923,  20  =>  [-2620,  2620]
#          183231,  18  =>  [-1650,  1650]
#          366462,  19  =>  [-1650,  1650]
#         1465846,  21  =>  [-1465,  1463]
#         2931693,  22  =>  [ -732,   731]
#            2863,  12  =>  [ -680,   680]
#            5726,  13  =>  [ -680,   680]
#           11452,  14  =>  [ -680,   680]
#           22904,  15  =>  [ -680,   680]
#           45808,  16  =>  [ -680,   680]
#           91615,  17  =>  [ -484,   484]
#         5863385,  23  =>  [ -366,   364]
#        11726771,  24  =>  [ -183,   181]
#             179,   8  =>  [ -102,   102]
#             358,   9  =>  [ -102,   102]
#             716,  10  =>  [ -102,   102]
#        23453541,  25  =>  [  -91,    90]
#            1431,  11  =>  [  -82,    82]
#        46907083,  26  =>  [  -45,    44]
#              89,   7  =>  [  -22,    22]
#        93814166,  27  =>  [  -22,    21]
#              11,   4  =>  [  -12,    12]
#              22,   5  =>  [  -12,    12]
#       187628332,  28  =>  [  -11,    10]
#              45,   6  =>  [   -9,     9]
#       375256664,  29  =>  [   -5,     4]
#               3,   2  =>  [   -3,     3]
#               6,   3  =>  [   -3,     3]
#               1,   1  =>  [   -1,     1]
#       750513327,  30  =>  [   -2,     1]
#               1,   0  =>  [    0,     0]
#      1501026655,  31  =>  [   -1,     0]

def floor_Log2Pow10(e):
    return (e * 1741647) >> 19

def ceil_Log2Pow10(e):
    return (e * 1741647 + (2**19 - 1)) >> 19

# print "Log2Pow10 range:"
# print FindMinMax(LogApprox(2, 10, 1741647, 19).TestCeil, min_exp=-5000, max_exp=5000)

# log_2 10^e:
#         1741647,  19  =>  [-1233,  1232]
#          108853,  15  =>  [ -642,   642]
#          217706,  16  =>  [ -642,   642]
#          435412,  17  =>  [ -642,   642]
#          870824,  18  =>  [ -642,   642]
#         3483294,  20  =>  [ -616,   616]
#         6966588,  21  =>  [ -308,   307]
#           13607,  12  =>  [ -204,   204]
#        13933176,  22  =>  [ -154,   153]
#           27213,  13  =>  [ -145,   145]
#           54426,  14  =>  [ -145,   145]
#            6803,  11  =>  [  -86,    86]
#        27866353,  23  =>  [  -77,    76]
#            1701,   9  =>  [  -58,    58]
#            3402,  10  =>  [  -58,    58]
#        55732705,  24  =>  [  -38,    38]
#             213,   6  =>  [  -30,    30]
#             425,   7  =>  [  -27,    27]
#             850,   8  =>  [  -27,    27]
#       111465410,  25  =>  [  -19,    18]
#              53,   4  =>  [  -15,    15]
#             106,   5  =>  [  -15,    15]
#       222930821,  26  =>  [   -9,     9]
#       445861641,  27  =>  [   -4,     4]
#              13,   2  =>  [   -3,     3]
#              27,   3  =>  [   -2,     2]
#       891723283,  28  =>  [   -2,     2]
#               7,   1  =>  [   -1,     1]
#               3,   0  =>  [    0,     0]
#      1783446566,  29  =>  [   -1,     0]
#      3566893132,  30  =>  [    0,     0]
#      7133786264,  31  =>  [    0,     0]

def floor_Log2Pow5(e):
    return (e * 1217359) >> 19

def ceil_Log2Pow5(e):
    return (e * 1217359 + (2**19 - 1)) >> 19

# print "Log2Pow5 range:"
# print FindMinMax(LogApprox(2, 5, 1217359, 19).TestCeil, min_exp=-5000, max_exp=5000)

# log_2 5^e:
#         1217359,  19  =>  [-1764,  1763]
#         2434718,  20  =>  [ -882,   881]
#           76085,  15  =>  [ -642,   642]
#          152170,  16  =>  [ -642,   642]
#          304340,  17  =>  [ -642,   642]
#          608680,  18  =>  [ -642,   642]
#         4869436,  21  =>  [ -441,   440]
#         9738872,  22  =>  [ -220,   220]
#            9511,  12  =>  [ -204,   204]
#           19021,  13  =>  [ -145,   145]
#           38042,  14  =>  [ -145,   145]
#        19477745,  23  =>  [ -110,   109]
#            4755,  11  =>  [  -86,    86]
#            1189,   9  =>  [  -58,    58]
#            2378,  10  =>  [  -58,    58]
#        38955489,  24  =>  [  -55,    54]
#             149,   6  =>  [  -30,    30]
#             297,   7  =>  [  -27,    27]
#             594,   8  =>  [  -27,    27]
#        77910978,  25  =>  [  -27,    27]
#              37,   4  =>  [  -15,    15]
#              74,   5  =>  [  -15,    15]
#       155821957,  26  =>  [  -13,    13]
#       311643913,  27  =>  [   -6,     6]
#               9,   2  =>  [   -3,     3]
#       623287827,  28  =>  [   -3,     3]
#              19,   3  =>  [   -2,     2]
#               5,   1  =>  [   -1,     1]
#      1246575654,  29  =>  [   -1,     1]
#               2,   0  =>  [    0,     0]
#      2493151308,  30  =>  [    0,     0]
#      4986302616,  31  =>  [    0,     0]

# If required, can we use log2 10^e = e + log2 5^e to increase the range for log2 10^e?
for e in range(-1233,  1232 + 1):
    assert floor_Log2Pow10(e) == e + floor_Log2Pow5(e)
    assert ceil_Log2Pow10(e) == e + ceil_Log2Pow5(e)
for e in range(-1764, 1763 + 1):
    assert ((e * 1741647) >> 19) == e + floor_Log2Pow5(e)
    assert ((e * 1741647 + (2**19 - 1)) >> 19) == e + ceil_Log2Pow5(e)

def floor_log5Pow2(e):
    return (e * 225799) >> 19

def ceil_log5Pow2(e):
    return (e * 225799 + (2**19 - 1)) >> 19

# log_5 2^e:
#                    225799,  19  =>  [ -1831,   1831]
#                    451597,  20  =>  [ -1492,   1492]
#                    903194,  21  =>  [ -1492,   1492]
#                   1806388,  22  =>  [ -1188,   1186]
#                    112899,  18  =>  [ -1153,   1153]
#                   3612777,  23  =>  [  -594,    592]
#                       441,  10  =>  [  -475,    475]
#                       882,  11  =>  [  -475,    475]
#                      1764,  12  =>  [  -475,    475]
#                      3528,  13  =>  [  -475,    475]
#                      7056,  14  =>  [  -475,    475]
#                     14112,  15  =>  [  -475,    475]
#                     28225,  16  =>  [  -338,    338]
#                     56450,  17  =>  [  -338,    338]
#                   7225554,  24  =>  [  -297,    294]
#                  14451107,  25  =>  [  -148,    146]
#                        55,   7  =>  [   -71,     71]
#                       110,   8  =>  [   -71,     71]
#                  28902215,  26  =>  [   -74,     71]
#                       221,   9  =>  [   -50,     50]
#                  57804429,  27  =>  [   -37,     34]
#                 115608858,  28  =>  [   -18,     16]
#                         7,   4  =>  [   -15,     15]
#                        14,   5  =>  [   -15,     15]
#                        28,   6  =>  [   -15,     15]
#                 231217717,  29  =>  [    -9,      6]
#                         3,   3  =>  [    -4,      4]
#                 462435433,  30  =>  [    -4,      2]
#                         1,   1  =>  [    -1,      1]
#                         2,   2  =>  [    -1,      1]
#                         0,   0  =>  [     0,      0]
#                 924870866,  31  =>  [    -2,      0]

def floor_log5Pow10(e):
    return (e * 750087) >> 19

def ceil_log5Pow10(e):
    return (e * 750087 + (2**19 - 1)) >> 19

# log_5 10^e:
#                    750087,  19  =>  [ -1831,   1831]
#                   1500173,  20  =>  [ -1431,   1430]
#                    375043,  18  =>  [ -1153,   1153]
#                   3000346,  21  =>  [  -715,    715]
#                      1465,  10  =>  [  -475,    475]
#                      2930,  11  =>  [  -475,    475]
#                      5860,  12  =>  [  -475,    475]
#                     11720,  13  =>  [  -475,    475]
#                     23440,  14  =>  [  -475,    475]
#                     46880,  15  =>  [  -475,    475]
#                   6000692,  22  =>  [  -357,    357]
#                     93761,  16  =>  [  -338,    338]
#                    187522,  17  =>  [  -338,    338]
#                  12001385,  23  =>  [  -178,    178]
#                  24002770,  24  =>  [   -89,     88]
#                       183,   7  =>  [   -71,     71]
#                       366,   8  =>  [   -71,     71]
#                       733,   9  =>  [   -50,     50]
#                  48005539,  25  =>  [   -44,     44]
#                  96011079,  26  =>  [   -22,     21]
#                        23,   4  =>  [   -15,     15]
#                        46,   5  =>  [   -15,     15]
#                        92,   6  =>  [   -15,     15]
#                 192022157,  27  =>  [   -11,     10]
#                        11,   3  =>  [    -4,      4]
#                 384044314,  28  =>  [    -5,      4]
#                 768088629,  29  =>  [    -2,      2]
#                         3,   1  =>  [    -1,      1]
#                         6,   2  =>  [    -1,      1]
#                         1,   0  =>  [     0,      0]
#                1536177257,  30  =>  [    -1,      0]
#                3072354514,  31  =>  [     0,      0]










# BITS == 32
# Precision, ExponentBits = 24, 8
# MinExponent = -151, MaxExponent = 102
# log_10 2^e:
#                      1233,  12  =>  [  -151,    102]
# log_10 5^e:
#                      2863,  12  =>  [  -151,    102]
# log_2 10^e:
#                     13607,  12  =>  [  -151,    102]
# log_2 5^e:
#                      9511,  12  =>  [  -151,    102]


# BITS == 32
# Precision, ExponentBits = 53, 11
# MinExponent = -1076, MaxExponent = 969
# log_10 2^e:
#                     78913,  18  =>  [ -1076,    969]
# log_10 5^e:
#                    183231,  18  =>  [ -1076,    969]
# log_2 10^e:
#                   1741647,  19  =>  [ -1076,    969]
# log_2 5^e:
#                   1217359,  19  =>  [ -1076,    969]


# BITS == 64
# Precision, ExponentBits = 64, 15
# MinExponent = -16447, MaxExponent = 16318
# log_10 2^e:
#                  20201781,  26  =>  [-16447,  16318]
# log_10 5^e:
#                  46907083,  26  =>  [-16447,  16318]
# log_2 10^e:
#                 222930821,  26  =>  [-16447,  16318]
# log_2 5^e:
#                 155821957,  26  =>  [-16447,  16318]


# BITS == 64
# Precision, ExponentBits = 113, 15
# MinExponent = -16496, MaxExponent = 16269
# log_10 2^e:
#                  20201781,  26  =>  [-16496,  16269]
# log_10 5^e:
#                  46907083,  26  =>  [-16496,  16269]
# log_2 10^e:
#                 222930821,  26  =>  [-16496,  16269]
# log_2 5^e:
#                 155821957,  26  =>  [-16496,  16269]
