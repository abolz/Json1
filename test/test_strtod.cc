#include "catch.hpp"
#include "../src/json_numbers.h"

#include <cmath>

#define CHECK_EQ(EXPECTED, ACTUAL) CHECK(EXPECTED == ACTUAL)
#define CHECK_TRUE(EXPECTED) CHECK(EXPECTED == true)

static inline double Strtod(std::string const& digits, int exponent)
{
    return charconv::bellerophon::DigitsToDouble(digits.data(), static_cast<int>(digits.size()), exponent, /*nonzero_tail*/ false);
}

TEST_CASE("Strtod - double_conversion")
{
    constexpr double Inf = std::numeric_limits<double>::infinity();

    // Test cases from:
    // https://github.com/google/double-conversion/blob/master/test/cctest/test-strtod.cc

    char const* vector = "0";
    CHECK_EQ(0.0, Strtod(vector, 1));
    CHECK_EQ(0.0, Strtod(vector, 2));
    CHECK_EQ(0.0, Strtod(vector, -2));
    CHECK_EQ(0.0, Strtod(vector, -999));
    CHECK_EQ(0.0, Strtod(vector, 999));

    vector = "1";
    CHECK_EQ(1.0, Strtod(vector, 0));
    CHECK_EQ(10.0, Strtod(vector, 1));
    CHECK_EQ(100.0, Strtod(vector, 2));
    CHECK_EQ(1e20, Strtod(vector, 20));
    CHECK_EQ(1e22, Strtod(vector, 22));
    CHECK_EQ(1e23, Strtod(vector, 23));
    CHECK_EQ(1e35, Strtod(vector, 35));
    CHECK_EQ(1e36, Strtod(vector, 36));
    CHECK_EQ(1e37, Strtod(vector, 37));
    CHECK_EQ(1e-1, Strtod(vector, -1));
    CHECK_EQ(1e-2, Strtod(vector, -2));
    CHECK_EQ(1e-5, Strtod(vector, -5));
    CHECK_EQ(1e-20, Strtod(vector, -20));
    CHECK_EQ(1e-22, Strtod(vector, -22));
    CHECK_EQ(1e-23, Strtod(vector, -23));
    CHECK_EQ(1e-25, Strtod(vector, -25));
    CHECK_EQ(1e-39, Strtod(vector, -39));

    vector = "2";
    CHECK_EQ(2.0, Strtod(vector, 0));
    CHECK_EQ(20.0, Strtod(vector, 1));
    CHECK_EQ(200.0, Strtod(vector, 2));
    CHECK_EQ(2e20, Strtod(vector, 20));
    CHECK_EQ(2e22, Strtod(vector, 22));
    CHECK_EQ(2e23, Strtod(vector, 23));
    CHECK_EQ(2e35, Strtod(vector, 35));
    CHECK_EQ(2e36, Strtod(vector, 36));
    CHECK_EQ(2e37, Strtod(vector, 37));
    CHECK_EQ(2e-1, Strtod(vector, -1));
    CHECK_EQ(2e-2, Strtod(vector, -2));
    CHECK_EQ(2e-5, Strtod(vector, -5));
    CHECK_EQ(2e-20, Strtod(vector, -20));
    CHECK_EQ(2e-22, Strtod(vector, -22));
    CHECK_EQ(2e-23, Strtod(vector, -23));
    CHECK_EQ(2e-25, Strtod(vector, -25));
    CHECK_EQ(2e-39, Strtod(vector, -39));

    vector = "9";
    CHECK_EQ(9.0, Strtod(vector, 0));
    CHECK_EQ(90.0, Strtod(vector, 1));
    CHECK_EQ(900.0, Strtod(vector, 2));
    CHECK_EQ(9e20, Strtod(vector, 20));
    CHECK_EQ(9e22, Strtod(vector, 22));
    CHECK_EQ(9e23, Strtod(vector, 23));
    CHECK_EQ(9e35, Strtod(vector, 35));
    CHECK_EQ(9e36, Strtod(vector, 36));
    CHECK_EQ(9e37, Strtod(vector, 37));
    CHECK_EQ(9e-1, Strtod(vector, -1));
    CHECK_EQ(9e-2, Strtod(vector, -2));
    CHECK_EQ(9e-5, Strtod(vector, -5));
    CHECK_EQ(9e-20, Strtod(vector, -20));
    CHECK_EQ(9e-22, Strtod(vector, -22));
    CHECK_EQ(9e-23, Strtod(vector, -23));
    CHECK_EQ(9e-25, Strtod(vector, -25));
    CHECK_EQ(9e-39, Strtod(vector, -39));

    vector = "12345";
    CHECK_EQ(12345.0, Strtod(vector, 0));
    CHECK_EQ(123450.0, Strtod(vector, 1));
    CHECK_EQ(1234500.0, Strtod(vector, 2));
    CHECK_EQ(12345e20, Strtod(vector, 20));
    CHECK_EQ(12345e22, Strtod(vector, 22));
    CHECK_EQ(12345e23, Strtod(vector, 23));
    CHECK_EQ(12345e30, Strtod(vector, 30));
    CHECK_EQ(12345e31, Strtod(vector, 31));
    CHECK_EQ(12345e32, Strtod(vector, 32));
    CHECK_EQ(12345e35, Strtod(vector, 35));
    CHECK_EQ(12345e36, Strtod(vector, 36));
    CHECK_EQ(12345e37, Strtod(vector, 37));
    CHECK_EQ(12345e-1, Strtod(vector, -1));
    CHECK_EQ(12345e-2, Strtod(vector, -2));
    CHECK_EQ(12345e-5, Strtod(vector, -5));
    CHECK_EQ(12345e-20, Strtod(vector, -20));
    CHECK_EQ(12345e-22, Strtod(vector, -22));
    CHECK_EQ(12345e-23, Strtod(vector, -23));
    CHECK_EQ(12345e-25, Strtod(vector, -25));
    CHECK_EQ(12345e-39, Strtod(vector, -39));

    vector = "12345678901234";
    CHECK_EQ(12345678901234.0, Strtod(vector, 0));
    CHECK_EQ(123456789012340.0, Strtod(vector, 1));
    CHECK_EQ(1234567890123400.0, Strtod(vector, 2));
    CHECK_EQ(12345678901234e20, Strtod(vector, 20));
    CHECK_EQ(12345678901234e22, Strtod(vector, 22));
    CHECK_EQ(12345678901234e23, Strtod(vector, 23));
    CHECK_EQ(12345678901234e30, Strtod(vector, 30));
    CHECK_EQ(12345678901234e31, Strtod(vector, 31));
    CHECK_EQ(12345678901234e32, Strtod(vector, 32));
    CHECK_EQ(12345678901234e35, Strtod(vector, 35));
    CHECK_EQ(12345678901234e36, Strtod(vector, 36));
    CHECK_EQ(12345678901234e37, Strtod(vector, 37));
    CHECK_EQ(12345678901234e-1, Strtod(vector, -1));
    CHECK_EQ(12345678901234e-2, Strtod(vector, -2));
    CHECK_EQ(12345678901234e-5, Strtod(vector, -5));
    CHECK_EQ(12345678901234e-20, Strtod(vector, -20));
    CHECK_EQ(12345678901234e-22, Strtod(vector, -22));
    CHECK_EQ(12345678901234e-23, Strtod(vector, -23));
    CHECK_EQ(12345678901234e-25, Strtod(vector, -25));
    CHECK_EQ(12345678901234e-39, Strtod(vector, -39));

    vector = "123456789012345";
    CHECK_EQ(123456789012345.0, Strtod(vector, 0));
    CHECK_EQ(1234567890123450.0, Strtod(vector, 1));
    CHECK_EQ(12345678901234500.0, Strtod(vector, 2));
    CHECK_EQ(123456789012345e20, Strtod(vector, 20));
    CHECK_EQ(123456789012345e22, Strtod(vector, 22));
    CHECK_EQ(123456789012345e23, Strtod(vector, 23));
    CHECK_EQ(123456789012345e35, Strtod(vector, 35));
    CHECK_EQ(123456789012345e36, Strtod(vector, 36));
    CHECK_EQ(123456789012345e37, Strtod(vector, 37));
    CHECK_EQ(123456789012345e39, Strtod(vector, 39));
    CHECK_EQ(123456789012345e-1, Strtod(vector, -1));
    CHECK_EQ(123456789012345e-2, Strtod(vector, -2));
    CHECK_EQ(123456789012345e-5, Strtod(vector, -5));
    CHECK_EQ(123456789012345e-20, Strtod(vector, -20));
    CHECK_EQ(123456789012345e-22, Strtod(vector, -22));
    CHECK_EQ(123456789012345e-23, Strtod(vector, -23));
    CHECK_EQ(123456789012345e-25, Strtod(vector, -25));
    CHECK_EQ(123456789012345e-39, Strtod(vector, -39));

    CHECK_EQ(0.0,        Strtod("0", 12345));
    CHECK_EQ(0.0,        Strtod("", 1324));
    CHECK_EQ(0.0,        Strtod("000000000", 123));
    CHECK_EQ(0.0,        Strtod("2", -324));
    CHECK_EQ(4e-324,     Strtod("3", -324));
    CHECK_EQ(0.0,        Strtod("1", -325));
    CHECK_EQ(0.0,        Strtod("1", -325));
    CHECK_EQ(0.0,        Strtod("20000", -328));
    CHECK_EQ(40000e-328, Strtod("30000", -328));
    CHECK_EQ(0.0,        Strtod("10000", -329));
    CHECK_EQ(0.0,        Strtod("90000", -329));
    CHECK_EQ(0.0,        Strtod("000000001", -325));
    CHECK_EQ(0.0,        Strtod("000000001", -325));
    CHECK_EQ(0.0,        Strtod("0000000020000", -328));
    CHECK_EQ(40000e-328, Strtod("00000030000", -328));
    CHECK_EQ(0.0,        Strtod("0000000010000", -329));
    CHECK_EQ(0.0,        Strtod("0000000090000", -329));

    CHECK_EQ(Inf,                     Strtod("1", 309));
    CHECK_EQ(1e308,                   Strtod("1", 308));
    CHECK_EQ(1234e305,                Strtod("1234", 305));
    CHECK_EQ(1234e304,                Strtod("1234", 304));
    CHECK_EQ(Inf,                     Strtod("18", 307));
    CHECK_EQ(17e307,                  Strtod("17", 307));
    CHECK_EQ(Inf,                     Strtod("0000001", 309));
    CHECK_EQ(1e308,                   Strtod("00000001", 308));
    CHECK_EQ(1234e305,                Strtod("00000001234", 305));
    CHECK_EQ(1234e304,                Strtod("000000001234", 304));
    CHECK_EQ(Inf,                     Strtod("0000000018", 307));
    CHECK_EQ(17e307,                  Strtod("0000000017", 307));
    CHECK_EQ(Inf,                     Strtod("1000000", 303));
    CHECK_EQ(1e308,                   Strtod("100000", 303));
    CHECK_EQ(1234e305,                Strtod("123400000", 300));
    CHECK_EQ(1234e304,                Strtod("123400000", 299));
    CHECK_EQ(Inf,                     Strtod("180000000", 300));
    CHECK_EQ(17e307,                  Strtod("170000000", 300));
    CHECK_EQ(Inf,                     Strtod("00000001000000", 303));
    CHECK_EQ(1e308,                   Strtod("000000000000100000", 303));
    CHECK_EQ(1234e305,                Strtod("00000000123400000", 300));
    CHECK_EQ(1234e304,                Strtod("0000000123400000", 299));
    CHECK_EQ(Inf,                     Strtod("00000000180000000", 300));
    CHECK_EQ(17e307,                  Strtod("00000000170000000", 300));
    CHECK_EQ(1.7976931348623157E+308, Strtod("17976931348623157", 292));
    CHECK_EQ(1.7976931348623158E+308, Strtod("17976931348623158", 292));
    CHECK_EQ(Inf,                     Strtod("17976931348623159", 292));

    // The following number is the result of 89255.0/1e-22. Both floating-point
    // numbers can be accurately represented with doubles. However on Linux,x86
    // the floating-point stack is set to 80bits and the double-rounding
    // introduces an error.
    CHECK_EQ(89255e-22, Strtod("89255", -22));

    // Some random values.
    CHECK_EQ(358416272e-33, Strtod("358416272", -33));
    CHECK_EQ(104110013277974872254e-225, Strtod("104110013277974872254", -225));

    CHECK_EQ(123456789e108, Strtod("123456789", 108));
    CHECK_EQ(123456789e109, Strtod("123456789", 109));
    CHECK_EQ(123456789e110, Strtod("123456789", 110));
    CHECK_EQ(123456789e111, Strtod("123456789", 111));
    CHECK_EQ(123456789e112, Strtod("123456789", 112));
    CHECK_EQ(123456789e113, Strtod("123456789", 113));
    CHECK_EQ(123456789e114, Strtod("123456789", 114));
    CHECK_EQ(123456789e115, Strtod("123456789", 115));

    CHECK_EQ(1234567890123456789012345e108, Strtod("1234567890123456789012345", 108));
    CHECK_EQ(1234567890123456789012345e109, Strtod("1234567890123456789012345", 109));
    CHECK_EQ(1234567890123456789012345e110, Strtod("1234567890123456789012345", 110));
    CHECK_EQ(1234567890123456789012345e111, Strtod("1234567890123456789012345", 111));
    CHECK_EQ(1234567890123456789012345e112, Strtod("1234567890123456789012345", 112));
    CHECK_EQ(1234567890123456789012345e113, Strtod("1234567890123456789012345", 113));
    CHECK_EQ(1234567890123456789012345e114, Strtod("1234567890123456789012345", 114));
    CHECK_EQ(1234567890123456789012345e115, Strtod("1234567890123456789012345", 115));

    CHECK_EQ(1234567890123456789052345e108, Strtod("1234567890123456789052345", 108));
    CHECK_EQ(1234567890123456789052345e109, Strtod("1234567890123456789052345", 109));
    CHECK_EQ(1234567890123456789052345e110, Strtod("1234567890123456789052345", 110));
    CHECK_EQ(1234567890123456789052345e111, Strtod("1234567890123456789052345", 111));
    CHECK_EQ(1234567890123456789052345e112, Strtod("1234567890123456789052345", 112));
    CHECK_EQ(1234567890123456789052345e113, Strtod("1234567890123456789052345", 113));
    CHECK_EQ(1234567890123456789052345e114, Strtod("1234567890123456789052345", 114));
    CHECK_EQ(1234567890123456789052345e115, Strtod("1234567890123456789052345", 115));

    CHECK_EQ(5.445618932859895e-255,
        Strtod("5445618932859895362967233318697132813618813095743952975"
               "4392982234069699615600475529427176366709107287468930197"
               "8628345413991790019316974825934906752493984055268219809"
               "5012176093045431437495773903922425632551857520884625114"
               "6241265881735209066709685420744388526014389929047617597"
               "0302268848374508109029268898695825171158085457567481507"
               "4162979705098246243690189880319928315307816832576838178"
               "2563074014542859888710209237525873301724479666744537857"
               "9026553346649664045621387124193095870305991178772256504"
               "4368663670643970181259143319016472430928902201239474588"
               "1392338901353291306607057623202353588698746085415097902"
               "6640064319118728664842287477491068264828851624402189317"
               "2769161449825765517353755844373640588822904791244190695"
               "2998382932630754670573838138825217065450843010498555058"
               "88186560731", -1035));

    // Boundary cases. Boundaries themselves should round to even.
    //
    // 0x1FFFFFFFFFFFF * 2^3 = 72057594037927928
    //                   next: 72057594037927936
    //               boundary: 72057594037927932  should round up.
    CHECK_EQ(72057594037927928.0, Strtod("72057594037927928", 0));
    CHECK_EQ(72057594037927936.0, Strtod("72057594037927936", 0));
    CHECK_EQ(72057594037927936.0, Strtod("72057594037927932", 0));
    CHECK_EQ(72057594037927928.0, Strtod("7205759403792793199999", -5));
    CHECK_EQ(72057594037927936.0, Strtod("7205759403792793200001", -5));

    // 0x1FFFFFFFFFFFF * 2^10 = 9223372036854774784
    //                    next: 9223372036854775808
    //                boundary: 9223372036854775296 should round up.
    CHECK_EQ(9223372036854774784.0, Strtod("9223372036854774784", 0));
    CHECK_EQ(9223372036854775808.0, Strtod("9223372036854775808", 0));
    CHECK_EQ(9223372036854775808.0, Strtod("9223372036854775296", 0));
    CHECK_EQ(9223372036854774784.0, Strtod("922337203685477529599999", -5));
    CHECK_EQ(9223372036854775808.0, Strtod("922337203685477529600001", -5));

    // 0x1FFFFFFFFFFFF * 2^50 = 10141204801825834086073718800384
    //                    next: 10141204801825835211973625643008
    //                boundary: 10141204801825834649023672221696 should round up.
    CHECK_EQ(10141204801825834086073718800384.0, Strtod("10141204801825834086073718800384", 0));
    CHECK_EQ(10141204801825835211973625643008.0, Strtod("10141204801825835211973625643008", 0));
    CHECK_EQ(10141204801825835211973625643008.0, Strtod("10141204801825834649023672221696", 0));
    CHECK_EQ(10141204801825834086073718800384.0, Strtod("1014120480182583464902367222169599999", -5));
    CHECK_EQ(10141204801825835211973625643008.0, Strtod("1014120480182583464902367222169600001", -5));

    // 0x1FFFFFFFFFFFF * 2^99 = 5708990770823838890407843763683279797179383808
    //                    next: 5708990770823839524233143877797980545530986496
    //                boundary: 5708990770823839207320493820740630171355185152
    // The boundary should round up.
    CHECK_EQ(5708990770823838890407843763683279797179383808.0, Strtod("5708990770823838890407843763683279797179383808", 0));
    CHECK_EQ(5708990770823839524233143877797980545530986496.0, Strtod("5708990770823839524233143877797980545530986496", 0));
    CHECK_EQ(5708990770823839524233143877797980545530986496.0, Strtod("5708990770823839207320493820740630171355185152", 0));
    CHECK_EQ(5708990770823838890407843763683279797179383808.0, Strtod("5708990770823839207320493820740630171355185151999", -3));
    CHECK_EQ(5708990770823839524233143877797980545530986496.0, Strtod("5708990770823839207320493820740630171355185152001", -3));

    // The following test-cases got some public attention in early 2011 when they
    // sent Java and PHP into an infinite loop.
    CHECK_EQ(2.225073858507201e-308, Strtod("22250738585072011", -324));
    CHECK_EQ(2.22507385850720138309e-308,
        Strtod("22250738585072011360574097967091319759348195463516456480"
               "23426109724822222021076945516529523908135087914149158913"
               "03962110687008643869459464552765720740782062174337998814"
               "10632673292535522868813721490129811224514518898490572223"
               "07285255133155755015914397476397983411801999323962548289"
               "01710708185069063066665599493827577257201576306269066333"
               "26475653000092458883164330377797918696120494973903778297"
               "04905051080609940730262937128958950003583799967207254304"
               "36028407889577179615094551674824347103070260914462157228"
               "98802581825451803257070188608721131280795122334262883686"
               "22321503775666622503982534335974568884423900265498198385"
               "48794829220689472168983109969836584681402285424333066033"
               "98508864458040010349339704275671864433837704860378616227"
               "71738545623065874679014086723327636718751", -1076));
}

TEST_CASE("Strtod - Paxson, Kahan")
{
    //
    // V. Paxson and W. Kahan, "A Program for Testing IEEE Binary-Decimal Conversion", manuscript, May 1991,
    // ftp://ftp.ee.lbl.gov/testbase-report.ps.Z    (report)
    // ftp://ftp.ee.lbl.gov/testbase.tar.Z          (program)
    //

    //
    // Table 1:
    // Stress Inputs for Conversion to 53-bit Binary, < 1/2 ULP
    //

    CHECK_EQ(5e+125, Strtod("5", 125));
    CHECK_EQ(69e+267, Strtod("69", 267));
    CHECK_EQ(999e-26, Strtod("999", -26));
    CHECK_EQ(7861e-34, Strtod("7861", -34));
    CHECK_EQ(75569e-254, Strtod("75569", -254));
    CHECK_EQ(928609e-261, Strtod("928609", -261));
    CHECK_EQ(9210917e+80, Strtod("9210917", 80));
    CHECK_EQ(84863171e+114, Strtod("84863171", 114));
    CHECK_EQ(653777767e+273, Strtod("653777767", 273));
    CHECK_EQ(5232604057e-298, Strtod("5232604057", -298));
    CHECK_EQ(27235667517e-109, Strtod("27235667517", -109));
    CHECK_EQ(653532977297e-123, Strtod("653532977297", -123));
    CHECK_EQ(3142213164987e-294, Strtod("3142213164987", -294));
    CHECK_EQ(46202199371337e-72, Strtod("46202199371337", -72));
    CHECK_EQ(231010996856685e-73, Strtod("231010996856685", -73));
    CHECK_EQ(9324754620109615e+212, Strtod("9324754620109615", 212));
    CHECK_EQ(78459735791271921e+49, Strtod("78459735791271921", 49));
    CHECK_EQ(272104041512242479e+200, Strtod("272104041512242479", 200));
    CHECK_EQ(6802601037806061975e+198, Strtod("6802601037806061975", 198));
    CHECK_EQ(20505426358836677347e-221, Strtod("20505426358836677347", -221));
    CHECK_EQ(836168422905420598437e-234, Strtod("836168422905420598437", -234));
    CHECK_EQ(4891559871276714924261e+222, Strtod("4891559871276714924261", 222));

    //
    // Table 2:
    // Stress Inputs for Conversion to 53-bit Binary, > 1/2 ULP
    //

    CHECK_EQ(9e-265, Strtod("9", -265));
    CHECK_EQ(85e-37, Strtod("85", -37));
    CHECK_EQ(623e+100, Strtod("623", 100));
    CHECK_EQ(3571e+263, Strtod("3571", 263));
    CHECK_EQ(81661e+153, Strtod("81661", 153));
    CHECK_EQ(920657e-23, Strtod("920657", -23));
    CHECK_EQ(4603285e-24, Strtod("4603285", -24));
    CHECK_EQ(87575437e-309, Strtod("87575437", -309));
    CHECK_EQ(245540327e+122, Strtod("245540327", 122));
    CHECK_EQ(6138508175e+120, Strtod("6138508175", 120));
    CHECK_EQ(83356057653e+193, Strtod("83356057653", 193));
    CHECK_EQ(619534293513e+124, Strtod("619534293513", 124));
    CHECK_EQ(2335141086879e+218, Strtod("2335141086879", 218));
    CHECK_EQ(36167929443327e-159, Strtod("36167929443327", -159));
    CHECK_EQ(609610927149051e-255, Strtod("609610927149051", -255));
    CHECK_EQ(3743626360493413e-165, Strtod("3743626360493413", -165));
    CHECK_EQ(94080055902682397e-242, Strtod("94080055902682397", -242));
    CHECK_EQ(899810892172646163e+283, Strtod("899810892172646163", 283));
    CHECK_EQ(7120190517612959703e+120, Strtod("7120190517612959703", 120));
    CHECK_EQ(25188282901709339043e-252, Strtod("25188282901709339043", -252));
    CHECK_EQ(308984926168550152811e-52, Strtod("308984926168550152811", -52));
    CHECK_EQ(6372891218502368041059e+064, Strtod("6372891218502368041059", 64));

    //
    // Table 18:
    // Stress Inputs for Conversion to 56-bit Binary, < 1/2 ULP
    //

    CHECK_EQ(7e-27, Strtod("7", -27));
    CHECK_EQ(37e-29, Strtod("37", -29));
    CHECK_EQ(743e-18, Strtod("743", -18));
    CHECK_EQ(7861e-33, Strtod("7861", -33));
    CHECK_EQ(46073e-30, Strtod("46073", -30));
    CHECK_EQ(774497e-34, Strtod("774497", -34));
    CHECK_EQ(8184513e-33, Strtod("8184513", -33));
    CHECK_EQ(89842219e-28, Strtod("89842219", -28));
    CHECK_EQ(449211095e-29, Strtod("449211095", -29));
    CHECK_EQ(8128913627e-40, Strtod("8128913627", -40));
    CHECK_EQ(87365670181e-18, Strtod("87365670181", -18));
    CHECK_EQ(436828350905e-19, Strtod("436828350905", -19));
    CHECK_EQ(5569902441849e-49, Strtod("5569902441849", -49));
    CHECK_EQ(60101945175297e-32, Strtod("60101945175297", -32));
    CHECK_EQ(754205928904091e-51, Strtod("754205928904091", -51));
    CHECK_EQ(5930988018823113e-37, Strtod("5930988018823113", -37));
    CHECK_EQ(51417459976130695e-27, Strtod("51417459976130695", -27));
    CHECK_EQ(826224659167966417e-41, Strtod("826224659167966417", -41));
    CHECK_EQ(9612793100620708287e-57, Strtod("9612793100620708287", -57));
    CHECK_EQ(93219542812847969081e-39, Strtod("93219542812847969081", -39));
    CHECK_EQ(544579064588249633923e-48, Strtod("544579064588249633923", -48));
    CHECK_EQ(4985301935905831716201e-48, Strtod("4985301935905831716201", -48));

    //
    // Table 19:
    // Stress Inputs for Conversion to 56-bit Binary, > 1/2 ULP
    //

    CHECK_EQ(9e+26, Strtod("9", 26));
    CHECK_EQ(79e-8, Strtod("79", -8));
    CHECK_EQ(393e+26, Strtod("393", 26));
    CHECK_EQ(9171e-40, Strtod("9171", -40));
    CHECK_EQ(56257e-16, Strtod("56257", -16));
    CHECK_EQ(281285e-17, Strtod("281285", -17));
    CHECK_EQ(4691113e-43, Strtod("4691113", -43));
    CHECK_EQ(29994057e-15, Strtod("29994057", -15));
    CHECK_EQ(834548641e-46, Strtod("834548641", -46));
    CHECK_EQ(1058695771e-47, Strtod("1058695771", -47));
    CHECK_EQ(87365670181e-18, Strtod("87365670181", -18));
    CHECK_EQ(872580695561e-36, Strtod("872580695561", -36));
    CHECK_EQ(6638060417081e-51, Strtod("6638060417081", -51));
    CHECK_EQ(88473759402752e-52, Strtod("88473759402752", -52));
    CHECK_EQ(412413848938563e-27, Strtod("412413848938563", -27));
    CHECK_EQ(5592117679628511e-48, Strtod("5592117679628511", -48));
    CHECK_EQ(83881765194427665e-50, Strtod("83881765194427665", -50));
    CHECK_EQ(638632866154697279e-35, Strtod("638632866154697279", -35));
    CHECK_EQ(3624461315401357483e-53, Strtod("3624461315401357483", -53));
    CHECK_EQ(75831386216699428651e-30, Strtod("75831386216699428651", -30));
    CHECK_EQ(356645068918103229683e-42, Strtod("356645068918103229683", -42));
    CHECK_EQ(7022835002724438581513e-33, Strtod("7022835002724438581513", -33));
}

static double Strtod(std::string const& str)
{
    double value;
    auto const res = json::numbers::StringToNumber(value, str.data(), str.data() + str.size());
    CHECK(res == true);
    return value;
}

TEST_CASE("Strtod - Exponents")
{
    constexpr double Inf = std::numeric_limits<double>::infinity();

    CHECK_EQ(0.0, Strtod("0e+0"));
    CHECK_EQ(0.0, Strtod("0e-0"));
    CHECK_EQ(0.0, Strtod("0e+100"));
    CHECK_EQ(0.0, Strtod("0e-100"));
    CHECK_EQ(0.0, Strtod("0e+2147483647"));
    CHECK_EQ(0.0, Strtod("0e-2147483647"));
    CHECK_EQ(0.0, Strtod("0.0e+2147483647"));
    CHECK_EQ(0.0, Strtod("0.0e-2147483647"));
    CHECK_EQ(0.0, Strtod("0.00000000000000000000000000000000000000000000000000000000000000000000e+2147483647"));
    CHECK_EQ(0.0, Strtod("0.00000000000000000000000000000000000000000000000000000000000000000000e-2147483647"));
    CHECK_EQ(0.0, Strtod("0.00000000000000000000000000000000000000000000000000000000000000000001e-2147483647"));
    CHECK_EQ(0.0, Strtod("1.00000000000000000000000000000000000000000000000000000000000000000000e-2147483647"));
    CHECK_EQ(0.0, Strtod("0e-2147483648"));
    CHECK_EQ(0.0, Strtod("1e-2147483649"));
    CHECK_EQ(0.0, Strtod("1e-2147483648"));
    CHECK_EQ(0.0, Strtod("1e-2147483647"));
    CHECK_EQ(0.0, Strtod("1e-1000"));
    CHECK_EQ(0.0, Strtod("1e-100000"));
    CHECK_EQ(0.0, Strtod("1e-99999999")); // 1e-99999999
    CHECK_EQ(0.0, Strtod("1e-100000000")); // 1e-Inf

    CHECK_EQ(Inf, Strtod("1e+2147483647"));
    CHECK_EQ(Inf, Strtod("1e+2147483648"));
    CHECK_EQ(Inf, Strtod("0.00000000000000000000000000000000000000000000000000000000000000000001e+2147483647"));
    CHECK_EQ(Inf, Strtod("1e+99999999")); // 1e+99999999
    CHECK_EQ(Inf, Strtod("1e+100000000")); // 1e+Inf

    CHECK_EQ(1.0, Strtod( "0.1e+0000000000000000000000000000000000000000000000000000000000000000000000000001"));
    CHECK_EQ(1.0, Strtod( "1.0e+0000000000000000000000000000000000000000000000000000000000000000000000000000"));
    CHECK_EQ(1.0, Strtod("10.0e-0000000000000000000000000000000000000000000000000000000000000000000000000001"));
}

TEST_CASE("Strtod - Boundaries")
{
    constexpr double Inf = std::numeric_limits<double>::infinity();

    // 9007199254740991 * 2^-1074 = (2^53 - 1) * 2^-1074
    CHECK_EQ(4.450147717014402272e-308,
        Strtod("4.450147717014402272114819593418263951869639092703291296046852219449644444042153"
               "89103305904781627017582829831782607924221374017287738918929105531441481564124348"
               "67599762821265346585071045737627442980259622449029037796981144446145705102663115"
               "10031828794952795966823603998647925096578034214163701381261333311989876551545144"
               "03152612538132666529513060001849177663286607555958373922409899478075565940981010"
               "21612198814605258742579179000071675999344145086087205681577915435923018910334964"
               "86942061405218289243144579760516365090360651414037721744226256159024466852576737"
               "24464300755133324500796506867194913776884780053099639677097589658441378944337966"
               "21993967316936280457084866613206797017728916080020698679408551343728867675409720"
               "757232455434770912461317493580281734466552734375e-308"));
    // 9007199254740990 * 2^-1074
    CHECK_EQ(4.450147717014401778e-308,
        Strtod("4.450147717014401778049173752171719775300846224481918930987049605124880018456471"
               "39035755177760751831052846195619008686241717547743167145836439860405887584484471"
               "19639655002484083577939142623582164522087943959208000909794783876158397872163051"
               "22622675229968408654350206725478309956546318828765627255022767720818849892988457"
               "26333908582101604036318532842699932130356061901518261174396928478121372742040102"
               "17446565569357687263889031732270082446958029584739170416643195242132750803227473"
               "16608838720742955671061336566907126801014814608027120593609275183716632624844904"
               "31985250929886016737037234388448352929102742708402644340627409931664203093081360"
               "70794835812045179006047003875039546061891526346421705014598610179523165038319441"
               "51446491086954182492263498716056346893310546875e-308"));
    // half way between the two numbers above.
    // round to nearest even.
    CHECK_EQ(4.450147717014401778e-308,
        Strtod("4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
               "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
               "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
               "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
               "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
               "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
               "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
               "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
               "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
               "1358486831521563686919762403704226016998291015625e-308"));
    CHECK_EQ(4.450147717014401778e-308,
        Strtod("4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
               "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
               "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
               "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
               "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
               "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
               "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
               "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
               "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
               "13584868315215636869197624037042260169982910156250000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000e-308"));
    // ... round up
    CHECK_EQ(4.450147717014402272e-308,
        Strtod("4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
               "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
               "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
               "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
               "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
               "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
               "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
               "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
               "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
               "13584868315215636869197624037042260169982910156250000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000001e-308"));
    // ... round down
    CHECK_EQ(4.450147717014401778e-308,
        Strtod("4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
               "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
               "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
               "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
               "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
               "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
               "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
               "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
               "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
               "13584868315215636869197624037042260169982910156249999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999e-308"));

    // 9007199254740989 * 2^-1074
    CHECK_EQ(4.450147717014401284e-308,
        Strtod("4.450147717014401283983527910925175598732053356260546565927246990800115592870788"
               "88968204450739876644522862559455409448262061078198595372743774189370293604844593"
               "71679547183702820570807239509536886063916265469386964022608423306171090641662987"
               "35213521664984021341876809452308694816514603443367553128784202129647823234431770"
               "49515204626070541543124005683550686597425516247078148426383957478167179543099194"
               "13280932324110115785198884464468488894571914083391135151708475048342482696119981"
               "46275616036267622098978093373297888511668977802016519442992294208408798397113071"
               "39506201104638708973277961909701792081320705363705649004157230204887027241824755"
               "19595704307154077555009141136872295106054136612822711349788669015317462401229162"
               "271697366304312737383952480740845203399658203125e-308"));

    // min denormal = 2^-1074
    CHECK_EQ(4.940656458412465442e-324,
        Strtod("4.940656458412465441765687928682213723650598026143247644255856825006755072702087"
               "51865299836361635992379796564695445717730926656710355939796398774796010781878126"
               "30071319031140452784581716784898210368871863605699873072305000638740915356498438"
               "73124733972731696151400317153853980741262385655911710266585566867681870395603106"
               "24931945271591492455329305456544401127480129709999541931989409080416563324524757"
               "14786901472678015935523861155013480352649347201937902681071074917033322268447533"
               "35720832431936092382893458368060106011506169809753078342277318329247904982524730"
               "77637592724787465608477820373446969953364701797267771758512566055119913150489110"
               "14510378627381672509558373897335989936648099411642057026370902792427675445652290"
               "87538682506419718265533447265625e-324"));
    // 2 * 2^-1074
    CHECK_EQ(9.881312916824930884e-324,
        Strtod("9.881312916824930883531375857364427447301196052286495288511713650013510145404175"
               "03730599672723271984759593129390891435461853313420711879592797549592021563756252"
               "60142638062280905569163433569796420737743727211399746144610001277481830712996877"
               "46249467945463392302800634307707961482524771311823420533171133735363740791206212"
               "49863890543182984910658610913088802254960259419999083863978818160833126649049514"
               "29573802945356031871047722310026960705298694403875805362142149834066644536895066"
               "71441664863872184765786916736120212023012339619506156684554636658495809965049461"
               "55275185449574931216955640746893939906729403594535543517025132110239826300978220"
               "29020757254763345019116747794671979873296198823284114052741805584855350891304581"
               "7507736501283943653106689453125e-324"));
    // half-way between the two smallest (subnormal) numbers: (1 * 2^-1074 + 2 * 2^-1074) / 2
    // round to nearest even
    CHECK_EQ(9.881312916824930884e-324,
        Strtod("7.410984687618698162648531893023320585475897039214871466383785237510132609053131"
               "27797949754542453988569694847043168576596389985065533909694598162194016172817189"
               "45106978546710679176872575177347315553307795408549809608457500958111373034747658"
               "09687100959097544227100475730780971111893578483867565399878350301522805593404659"
               "37397917907387238682993958184816601691220194564999312897984113620624844986787135"
               "72180352209017023903285791732520220528974020802906854021606612375549983402671300"
               "03581248647904138574340187552090159017259254714629617513415977493871857473787096"
               "16456389087181198412716730560170454930047052695901657637768849082679869725733665"
               "21765567941072508764337560846003984904972149117463085539556354188641513168478436"
               "313080237596295773983001708984375e-324"));
    // round up
    CHECK_EQ(9.881312916824930884e-324,
        Strtod("7.410984687618698162648531893023320585475897039214871466383785237510132609053131"
               "27797949754542453988569694847043168576596389985065533909694598162194016172817189"
               "45106978546710679176872575177347315553307795408549809608457500958111373034747658"
               "09687100959097544227100475730780971111893578483867565399878350301522805593404659"
               "37397917907387238682993958184816601691220194564999312897984113620624844986787135"
               "72180352209017023903285791732520220528974020802906854021606612375549983402671300"
               "03581248647904138574340187552090159017259254714629617513415977493871857473787096"
               "16456389087181198412716730560170454930047052695901657637768849082679869725733665"
               "21765567941072508764337560846003984904972149117463085539556354188641513168478436"
               "31308023759629577398300170898437500000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000001e-324"));
    // round down
    CHECK_EQ(4.940656458412465442e-324,
        Strtod("7.410984687618698162648531893023320585475897039214871466383785237510132609053131"
               "27797949754542453988569694847043168576596389985065533909694598162194016172817189"
               "45106978546710679176872575177347315553307795408549809608457500958111373034747658"
               "09687100959097544227100475730780971111893578483867565399878350301522805593404659"
               "37397917907387238682993958184816601691220194564999312897984113620624844986787135"
               "72180352209017023903285791732520220528974020802906854021606612375549983402671300"
               "03581248647904138574340187552090159017259254714629617513415977493871857473787096"
               "16456389087181198412716730560170454930047052695901657637768849082679869725733665"
               "21765567941072508764337560846003984904972149117463085539556354188641513168478436"
               "31308023759629577398300170898437499999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999e-324"));

    // 9007199254740991 * 2^971 (max normal)
    CHECK_EQ(1.797693134862315708e+308,
        Strtod("1.797693134862315708145274237317043567980705675258449965989174768031572607800285"
               "38760589558632766878171540458953514382464234321326889464182768467546703537516986"
               "04991057655128207624549009038932894407586850845513394230458323690322294816580855"
               "9332123348274797826204144723168738177180919299881250404026184124858368e+308"));
    // 9007199254740992 * 2^971 ("infinity")
    CHECK_EQ(Inf,
        Strtod("1.797693134862315907729305190789024733617976978942306572734300811577326758055009"
               "63132708477322407536021120113879871393357658789768814416622492847430639474124377"
               "76789342486548527630221960124609411945308295208500576883815068234246288147391311"
               "0540827237163350510684586298239947245938479716304835356329624224137216e+308"));
    // half way between max-normal and infinity
    // should round to infinity in nearest-even mode.
    CHECK_EQ(Inf,
        Strtod("1.797693134862315807937289714053034150799341327100378269361737789804449682927647"
               "50946649017977587207096330286416692887910946555547851940402630657488671505820681"
               "90890200070838367627385484581771153176447573027006985557136695962284291481986083"
               "49364752927190741684443655107043427115596995080930428801779041744977920000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000e+308"));
    // ...round down
    CHECK_EQ(1.797693134862315708e+308,
        Strtod("1.797693134862315807937289714053034150799341327100378269361737789804449682927647"
               "50946649017977587207096330286416692887910946555547851940402630657488671505820681"
               "90890200070838367627385484581771153176447573027006985557136695962284291481986083"
               "49364752927190741684443655107043427115596995080930428801779041744977919999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
               "99999999999999999999999999999999999999999999999999999999999999999999999999999999e+308"));
    // ...round up
    CHECK_EQ(Inf,
        Strtod("1.797693134862315807937289714053034150799341327100378269361737789804449682927647"
               "50946649017977587207096330286416692887910946555547851940402630657488671505820681"
               "90890200070838367627385484581771153176447573027006985557136695962284291481986083"
               "49364752927190741684443655107043427115596995080930428801779041744977920000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000000000001e+308"));

    CHECK_EQ(2.225073858507202371e-308,
        Strtod("2.22507385850720212418870147920222032907240528279439037814303133837435107319244"
               "1946867544064325638818513821882185024380699999477330130056498841077919287413419"
               "2929720097048195199306799329096904278406473168204156592672863293363047467012331"
               "6852983422152744517260835859654566319282835244787787799894310779783833699159288"
               "5945552137141811284582511455843192230798975043950868594124572308917389461693683"
               "7232119137365897797772328669884035639025104444303545739673370658398105542045669"
               "3824658413747607155981176573877626747665912387199931904006317334709003012790188"
               "1752034471902500280612777779167983910905785840064647159438105114891542827750411"
               "7468219413395246668250343130618158782937900420539237507208336669324158000275839"
               "1118854188641513168478436313080237596295773983001708984375e-308"));
}

TEST_CASE("Strtod - Integers")
{
    constexpr double Inf = std::numeric_limits<double>::infinity();

    CHECK_EQ(  0.0, Strtod("0"));
    CHECK_EQ( -0.0, Strtod("-0"));
    CHECK_EQ(  1.0, Strtod("1"));
    CHECK_EQ( 12.0, Strtod("12"));
    CHECK_EQ( -1.0, Strtod("-1"));
    CHECK_EQ(-12.0, Strtod("-12"));

    CHECK_EQ(9.0, Strtod("9"));
    CHECK_EQ(99.0, Strtod("99"));
    CHECK_EQ(999.0, Strtod("999"));
    CHECK_EQ(9999.0, Strtod("9999"));
    CHECK_EQ(99999.0, Strtod("99999"));
    CHECK_EQ(999999.0, Strtod("999999"));
    CHECK_EQ(9999999.0, Strtod("9999999"));
    CHECK_EQ(99999999.0, Strtod("99999999"));
    CHECK_EQ(999999999.0, Strtod("999999999"));
    CHECK_EQ(9999999999.0, Strtod("9999999999"));
    CHECK_EQ(99999999999.0, Strtod("99999999999"));
    CHECK_EQ(999999999999.0, Strtod("999999999999"));
    CHECK_EQ(9999999999999.0, Strtod("9999999999999"));
    CHECK_EQ(99999999999999.0, Strtod("99999999999999"));
    CHECK_EQ(999999999999999.0, Strtod("999999999999999"));
    CHECK_EQ(9999999999999999.0, Strtod("9999999999999999"));
    CHECK_EQ(99999999999999999.0, Strtod("99999999999999999"));
    CHECK_EQ(999999999999999999.0, Strtod("999999999999999999"));
    CHECK_EQ(9999999999999999999.0, Strtod("9999999999999999999"));
    CHECK_EQ(99999999999999999999.0, Strtod("99999999999999999999"));

    CHECK_EQ(-9.0, Strtod("-9"));
    CHECK_EQ(-99.0, Strtod("-99"));
    CHECK_EQ(-999.0, Strtod("-999"));
    CHECK_EQ(-9999.0, Strtod("-9999"));
    CHECK_EQ(-99999.0, Strtod("-99999"));
    CHECK_EQ(-999999.0, Strtod("-999999"));
    CHECK_EQ(-9999999.0, Strtod("-9999999"));
    CHECK_EQ(-99999999.0, Strtod("-99999999"));
    CHECK_EQ(-999999999.0, Strtod("-999999999"));
    CHECK_EQ(-9999999999.0, Strtod("-9999999999"));
    CHECK_EQ(-99999999999.0, Strtod("-99999999999"));
    CHECK_EQ(-999999999999.0, Strtod("-999999999999"));
    CHECK_EQ(-9999999999999.0, Strtod("-9999999999999"));
    CHECK_EQ(-99999999999999.0, Strtod("-99999999999999"));
    CHECK_EQ(-999999999999999.0, Strtod("-999999999999999"));
    CHECK_EQ(-9999999999999999.0, Strtod("-9999999999999999"));
    CHECK_EQ(-99999999999999999.0, Strtod("-99999999999999999"));
    CHECK_EQ(-999999999999999999.0, Strtod("-999999999999999999"));
    CHECK_EQ(-9999999999999999999.0, Strtod("-9999999999999999999"));
    CHECK_EQ(-99999999999999999999.0, Strtod("-99999999999999999999"));

    CHECK_EQ( 2147483647.0, Strtod("2147483647")); // 2^31 - 1
    CHECK_EQ( 2147483648.0, Strtod("2147483648"));
    CHECK_EQ(-2147483647.0, Strtod("-2147483647"));
    CHECK_EQ(-2147483648.0, Strtod("-2147483648"));
    CHECK_EQ(-2147483649.0, Strtod("-2147483649"));
    CHECK_EQ( 4294967295.0, Strtod("4294967295")); // 2^32 - 1
    CHECK_EQ( 4294967296.0, Strtod("4294967296"));
    CHECK_EQ(-4294967295.0, Strtod("-4294967295"));
    CHECK_EQ(-4294967296.0, Strtod("-4294967296"));
    CHECK_EQ(-4294967297.0, Strtod("-4294967297"));
    CHECK_EQ( 9223372036854775807.0, Strtod("9223372036854775807")); // 2^63 - 1
    CHECK_EQ( 9223372036854775808.0, Strtod("9223372036854775808"));
    CHECK_EQ(-9223372036854775807.0, Strtod("-9223372036854775807"));
    CHECK_EQ(-9223372036854775808.0, Strtod("-9223372036854775808"));
    CHECK_EQ(-9223372036854775809.0, Strtod("-9223372036854775809"));
    CHECK_EQ( 18446744073709551615.0, Strtod("18446744073709551615")); // 2^64 - 1
    CHECK_EQ( 18446744073709551616.0, Strtod("18446744073709551616"));
    CHECK_EQ(-18446744073709551615.0, Strtod("-18446744073709551615"));
    CHECK_EQ(-18446744073709551616.0, Strtod("-18446744073709551616"));
    CHECK_EQ(-18446744073709551617.0, Strtod("-18446744073709551617"));

    // 10^799
    CHECK_EQ(Inf,
        Strtod("10000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000.0"));
}

TEST_CASE("Strtod - Regression")
{
    constexpr double Max = std::numeric_limits<double>::max();
    constexpr double Min = std::numeric_limits<double>::denorm_min();
    constexpr double MinNormal = std::numeric_limits<double>::min();

    CHECK_EQ(10000000000000000001e+19, Strtod("10000000000000000001", 19));

    CHECK_EQ(0.0, Strtod("0.0000"));
    CHECK_EQ(-0.0, Strtod("-0.0000"));

    CHECK_EQ(10000000000000000009e+0, Strtod("10000000000000000009e+0"));
    CHECK_EQ(10000000000000000009e+1, Strtod("10000000000000000009e+1"));
    CHECK_EQ(10000000000000000009e+2, Strtod("10000000000000000009e+2"));
    CHECK_EQ(10000000000000000009e+3, Strtod("10000000000000000009e+3"));
    CHECK_EQ(10000000000000000009e+4, Strtod("10000000000000000009e+4"));
    CHECK_EQ(10000000000000000009e+5, Strtod("10000000000000000009e+5"));
    CHECK_EQ(10000000000000000009e+6, Strtod("10000000000000000009e+6"));
    CHECK_EQ(10000000000000000009e+7, Strtod("10000000000000000009e+7"));
    CHECK_EQ(10000000000000000009e+8, Strtod("10000000000000000009e+8"));
    CHECK_EQ(10000000000000000009e+9, Strtod("10000000000000000009e+9"));
    CHECK_EQ(10000000000000000009e+10, Strtod("10000000000000000009e+10"));
    CHECK_EQ(10000000000000000009e+11, Strtod("10000000000000000009e+11"));
    CHECK_EQ(10000000000000000009e+12, Strtod("10000000000000000009e+12"));
    CHECK_EQ(10000000000000000009e+13, Strtod("10000000000000000009e+13"));
    CHECK_EQ(10000000000000000009e+14, Strtod("10000000000000000009e+14"));
    CHECK_EQ(10000000000000000009e+15, Strtod("10000000000000000009e+15"));
    CHECK_EQ(10000000000000000009e+16, Strtod("10000000000000000009e+16"));

    CHECK_EQ(1000000000000000000.0000000000000000001, Strtod("1000000000000000000.0000000000000000001"));

    CHECK_EQ(59.79470570797252226166574973080902316556696507444245101698,
        Strtod("59.79470570797252226166574973080902316556696507444245101698"));

    CHECK_EQ(0.0, Strtod("1e-324"));
    CHECK_EQ(0.0, Strtod("2e-324"));
    CHECK_EQ(3e-324, Strtod("3e-324"));
    CHECK_EQ(4e-324, Strtod("4e-324"));
    CHECK_EQ(5e-324, Strtod("5e-324")); // min denormal

    CHECK_EQ(4.9406564584124653e-324, Strtod("4.9406564584124653e-324"));
    CHECK_EQ(4.9406564584124654e-324, Strtod("4.9406564584124654e-324"));
    CHECK_EQ(4.9406564584124655e-324, Strtod("4.9406564584124655e-324"));
    CHECK_EQ(4.94065645841246539999999999999999999999999999999999999999999999999999999999e-324,
        Strtod("4.94065645841246539999999999999999999999999999999999999999999999999999999999e-324"));
    CHECK_EQ(4.94065645841246540000000000000000000000000000000000000000000000000000000001e-324,
        Strtod("4.94065645841246540000000000000000000000000000000000000000000000000000000001e-324"));

    CHECK_EQ(0.0, Strtod("2.4703282292062327e-324"));
    CHECK_EQ(2.4703282292062328e-324, Strtod("2.4703282292062328e-324"));
    CHECK_EQ(2.48e-324, Strtod("2.48e-324"));
    CHECK_EQ(2.5e-324, Strtod("2.5e-324"));
    CHECK_EQ(2.500000000000000000000000000000000000000000000000000000000000000000000000001e-324,
        Strtod("2.500000000000000000000000000000000000000000000000000000000000000000000000001e-324"));
    CHECK_EQ(2.225073858507201e-308, Strtod("2.225073858507201e-308")); // max denormal
    CHECK_EQ(2.2250738585072014e-308, Strtod("2.2250738585072014e-308")); // min normal
    CHECK_EQ(1.7976931348623157e+308, Strtod("1.7976931348623157e+308")); // max normal
    CHECK_EQ(1.7976931348623156999999999999999999999999999999999999999999999999999e+308,
        Strtod("1.7976931348623156999999999999999999999999999999999999999999999999999e+308"));
    CHECK_EQ(1.7976931348623157000000000000000000000000000000000000000000000000001e+308,
        Strtod("1.7976931348623157000000000000000000000000000000000000000000000000001e+308"));
    CHECK_EQ(1e-323, Strtod("1e-323"));
    CHECK_EQ(2e-323, Strtod("2e-323"));
    CHECK_EQ(3e-323, Strtod("3e-323"));
    CHECK_EQ(4e-323, Strtod("4e-323"));
    CHECK_EQ(1.7976931348623158e+308, Strtod("1.7976931348623158e+308"));
    CHECK_EQ(Max,
        Strtod("17976931348623157081452742373170435679807056752584499659891747680315726"
               "07800285387605895586327668781715404589535143824642343213268894641827684"
               "67546703537516986049910576551282076245490090389328944075868508455133942"
               "30458323690322294816580855933212334827479782620414472316873817718091929"
               "9881250404026184124858368"));
    CHECK_EQ(Min,
        Strtod("0.0000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000049406564584124654417656879286822137"
               "236505980261432476442558568250067550727020875186529983636163"
               "599237979656469544571773092665671035593979639877479601078187"
               "812630071319031140452784581716784898210368871863605699873072"
               "305000638740915356498438731247339727316961514003171538539807"
               "412623856559117102665855668676818703956031062493194527159149"
               "245532930545654440112748012970999954193198940908041656332452"
               "475714786901472678015935523861155013480352649347201937902681"
               "071074917033322268447533357208324319360923828934583680601060"
               "115061698097530783422773183292479049825247307763759272478746"
               "560847782037344696995336470179726777175851256605511991315048"
               "911014510378627381672509558373897335989936648099411642057026"
               "37090279242767544565229087538682506419718265533447265625"));
    CHECK_EQ(2.4354608055603473e+307,
        Strtod("243546080556034731077856379609316893158278902575447060151047"
               "212703405344938119816206067372775299130836050315842578309818"
               "316450894337978612745889730079163798234256495613858256849283"
               "467066859489192118352020514036083287319232435355752493038825"
               "828481044358810649108367633313557305310641892225870327827273"
               "41408256.000000"));
    CHECK_EQ(2.2250738585072011e-308, Strtod("2.2250738585072011e-308"));
    CHECK_EQ(5e-324,
        Strtod("2.4703282292062327208828439643411068618252990130716238221279"
               "284125033775363510437593264991818081799618989828234772285886"
               "546332835517796989819938739800539093906315035659515570226392"
               "290858392449105184435931802849936536152500319370457678249219"
               "365623669863658480757001585769269903706311928279558551332927"
               "834338409351978015531246597263579574622766465272827220056374"
               "006485499977096599470454020828166226237857393450736339007967"
               "761930577506740176324673600968951340535537458516661134223766"
               "678604162159680461914467291840300530057530849048765391711386"
               "591646239524912623653881879636239373280423891018672348497668"
               "235089863388587925628302755995657524455507255189313690836254"
               "779186948667994968324049705821028513185451396213837722826145"
               "437693412532098591327667236328125001e-324"));

    CHECK_EQ(0.0,
        Strtod("0.00000000000000000000000000000000000000000000000000000000000"
               "0000000000000000000000000000000000000000000000000000000000000"
               "0000000000000000000000000000000000000000000000000000000000000"
               "0000000000000000000000000000000000000000000000000000000000000"
               "0000000000000000000000000000000000000000000000000000000000000"
               "0000000000000000000024703282292062327208828439643411068618252"
               "9901307162382212792841250337753635104375932649918180817996189"
               "8982823477228588654633283551779698981993873980053909390631503"
               "5659515570226392290858392449105184435931802849936536152500319"
               "3704576782492193656236698636584807570015857692699037063119282"
               "7955855133292783433840935197801553124659726357957462276646527"
               "2827220056374006485499977096599470454020828166226237857393450"
               "7363390079677619305775067401763246736009689513405355374585166"
               "6113422376667860416215968046191446729184030053005753084904876"
               "5391711386591646239524912623653881879636239373280423891018672"
               "3484976682350898633885879256283027559956575244555072551893136"
               "9083625477918694866799496832404970582102851318545139621383772"
               "2826145437693412532098591327667236328125"));
    CHECK_EQ(5e-324,
        Strtod("0.000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000247032822920623272088284396434"
               "11068618252990130716238221279284125033775363510437593264991818081799618"
               "98982823477228588654633283551779698981993873980053909390631503565951557"
               "02263922908583924491051844359318028499365361525003193704576782492193656"
               "23669863658480757001585769269903706311928279558551332927834338409351978"
               "01553124659726357957462276646527282722005637400648549997709659947045402"
               "08281662262378573934507363390079677619305775067401763246736009689513405"
               "35537458516661134223766678604162159680461914467291840300530057530849048"
               "76539171138659164623952491262365388187963623937328042389101867234849766"
               "82350898633885879256283027559956575244555072551893136908362547791869486"
               "67994968324049705821028513185451396213837722826145437693412532098591327"
               "6672363281255"));
    CHECK_EQ(5e-324,
        Strtod("0.000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000000000000000000000000000000000"
               "00000000000000000000000000000000000000000247032822920623272088284396434"
               "11068618252990130716238221279284125033775363510437593264991818081799618"
               "98982823477228588654633283551779698981993873980053909390631503565951557"
               "02263922908583924491051844359318028499365361525003193704576782492193656"
               "23669863658480757001585769269903706311928279558551332927834338409351978"
               "01553124659726357957462276646527282722005637400648549997709659947045402"
               "08281662262378573934507363390079677619305775067401763246736009689513405"
               "35537458516661134223766678604162159680461914467291840300530057530849048"
               "76539171138659164623952491262365388187963623937328042389101867234849766"
               "82350898633885879256283027559956575244555072551893136908362547791869486"
               "67994968324049705821028513185451396213837722826145437693412532098591327"
               "667236328126"));
    CHECK_EQ(0.500000000000000166533453693773481063544750213623046875,
        Strtod("0.500000000000000166533453693773481063544750213623046875"));
    CHECK_EQ(3.518437208883201171875e13, Strtod("3.518437208883201171875e13"));
    CHECK_EQ(62.5364939768271845828, Strtod("62.5364939768271845828"));
    CHECK_EQ(8.10109172351e-10, Strtod("8.10109172351e-10"));
    CHECK_EQ(1.50000000000000011102230246251565404236316680908203125,
        Strtod("1.50000000000000011102230246251565404236316680908203125"));
    CHECK_EQ(9007199254740991.4999999999999999999999999999999995,
        Strtod("9007199254740991.4999999999999999999999999999999995"));
    CHECK_EQ(1.2345678901234567e22, Strtod("1.2345678901234567e22"));
    CHECK_EQ(2.2250738585072011e-308, Strtod("2.2250738585072011e-308"));
    CHECK_EQ(6.631236846766476e-316,
        Strtod("6.6312368714697582767853966302759672433990999473553031442499717"
               "587362866301392654396180682007880487441059604205526018528897150"
               "063763256665955396033303618005191075917832333584923372080578494"
               "993608994251286407188566165030934449228547591599881603044399098"
               "682919739314266256986631577498362522745234853124423586512070512"
               "924530832781161439325697279187097860044978723221938561502254152"
               "119972830784963194121246401117772161481107528151017752957198119"
               "743384519360959074196224175384736794951486324803914359317679811"
               "223967034438033355297560033532098300718322306892013830155987921"
               "841729099279241763393155074022348361207309147831684007154624400"
               "538175927027662135590421159867638194826541287705957668068727833"
               "49146967171293949598850675682115696218943412532098591327667236328125E-316"));
    CHECK_EQ(3.2379086165851934e-319,
        Strtod("3.2378839133029012895883524125015321748630376694231080599012970"
               "495523019706706765657868357425877995578606157765598382834355143"
               "910841531692526891905643964595773946180389283653051434639551003"
               "566966656292020173313440317300443693602052583458034314716600326"
               "995807313009548483639755486900107515300188817581841745696521731"
               "104736960227499346384253806233697747365600089974040609674980283"
               "891918789639685754392222064169814626901133425240027243859416510"
               "512935526014211553334302252372915238433223313261384314778235911"
               "424088000307751706259156707286570031519536642607698224949379518"
               "458015308952384398197084033899378732414634842056080000272705311"
               "068273879077914449185347715987501628125488627684932015189916680"
               "28251730299953143924168545708663913273994694463908672332763671875E-319"));
    CHECK_EQ(6.9533558078476524e-310,
        Strtod("6.953355807847677105972805215521891690222119817145950754416205607980030"
               "13154963668880611572639944188006538639986402869127553953941465283158479"
               "56685600829998895513577849614468960421131982842131079351102171626549398"
               "02416034676213829409720583759540476786936413816541621287843248433202369"
               "20991661224967600557302270324479971462211654218883777037602237117207955"
               "91258533828013962195524188394697705149041926576270603193728475623010741"
               "40442660237844114174497210955449896389180395827191602886654488182452409"
               "58398138944278337700150546201574501784875457466834216175949666176602002"
               "87528887833870748507731929971029979366198762266880963149896457660004790"
               "09083731736585750335262099860150896718774401964796827166283225641992040"
               "747894382698751809812609536720628966577351093292236328125E-310"));
    CHECK_EQ(3.3390932608534806e-319,
        Strtod("3.339068557571188581835713701280943911923401916998521771655656997328440"
               "31455961531816884914907466260909999811300946556642680817037843406572299"
               "16596426194677060348844249897410807907667784563321682004646515939958173"
               "71782125010668346652995912233993254584461125868481633343674905074271064"
               "40976309070801785658401977687881242531200881232626036303547481153223685"
               "33599053346255754042160606228586332807443018924703005556787346899784768"
               "70369853549413277156622170245846166991655321535529623870646888786637528"
               "99559280043617790174628627227337447170145299143304725786386460142425202"
               "47915673681950560773208853293843223323915646452641434007986196650406080"
               "77549162173963649264049738362290606875883456826586710961041737908872035"
               "803481241600376705491726170293986797332763671875E-319"));
    CHECK_EQ(2.2250738585072012e-308, Strtod("2.2250738585072012e-308"));
    CHECK_EQ(2.2250738585072011e-308, Strtod("2.2250738585072011e-308"));

    CHECK_EQ(6114917000000003e-14, Strtod("6114917000000003e-14"));
}
